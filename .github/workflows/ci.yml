name: CI

on:
  push:
    branches: [main]
  pull_request:

env:
  # Centralize Python version for consistency
  DEFAULT_PYTHON: '3.11'

jobs:
  # Quick lint check - only on PRs to catch formatting issues early
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
      - name: Run pre-commit hooks
        run: |
          pre-commit run --show-diff-on-failure --all-files

  # Core compatibility test - Python 3.9 on Ubuntu (most restrictive)
  test-core:
    name: Core Tests (Python 3.9)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          pip install -r requirements-dev.txt
      - name: Core test suite
        run: |
          pytest -q --cov=wf2wf --cov-report=xml --cov-branch
      - name: Upload coverage
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: core
          name: core-python39
          fail_ci_if_error: false

  # Extended test matrix - only after core tests pass
  test-matrix:
    name: Tests ${{ matrix.os }} / py${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    needs: test-core
    strategy:
      matrix:
        # Reduced matrix - focus on key combinations
        include:
          # Latest Python on all platforms
          - { os: ubuntu-latest, python: '3.12' }
          - { os: macos-latest, python: '3.12' }
          - { os: windows-latest, python: '3.12' }
          # Intermediate versions on Ubuntu only
          - { os: ubuntu-latest, python: '3.10' }
          - { os: ubuntu-latest, python: '3.11' }
          # Windows with Python 3.9 (known problematic)
          - { os: windows-latest, python: '3.9' }
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          pip install -r requirements-dev.txt
      - name: Test suite
        run: |
          pytest -q --cov=wf2wf --cov-report=xml --cov-branch
      - name: Upload coverage
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: matrix
          name: ${{ matrix.os }}-py${{ matrix.python }}
          fail_ci_if_error: false

  # Documentation build - only when needed
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    # Only run on pushes to main, or PRs that change docs
    if: |
      github.event_name == 'push' ||
      contains(github.event.pull_request.changed_files, 'docs/') ||
      contains(github.event.pull_request.changed_files, 'README.md') ||
      contains(github.event.pull_request.changed_files, 'pyproject.toml')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[docs]
      - name: Build documentation
        run: |
          cd docs
          python -m sphinx -b html . _build/html -W --keep-going
      - name: Upload docs artifact
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/_build/html/
          retention-days: 30

  # Package build test
  build:
    name: Build Package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          cache: 'pip'
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip build twine
      - name: Build package
        run: |
          python -m build
      - name: Check package
        run: |
          python -m twine check dist/*
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 30

  # Release job - only on tags
  release:
    name: Release to PyPI
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test-core, test-matrix, docs, build]
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for trusted publishing
    steps:
      - uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
